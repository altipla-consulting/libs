// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: pkg/cloudrun/v2/testdata/test.proto

package pkg_cloudrun_v2_testdata

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TrimTest_Test int32

const (
	TrimTest_TEST_UNKNOWN TrimTest_Test = 0
	TrimTest_TEST_FOO     TrimTest_Test = 1
)

// Enum value maps for TrimTest_Test.
var (
	TrimTest_Test_name = map[int32]string{
		0: "TEST_UNKNOWN",
		1: "TEST_FOO",
	}
	TrimTest_Test_value = map[string]int32{
		"TEST_UNKNOWN": 0,
		"TEST_FOO":     1,
	}
)

func (x TrimTest_Test) Enum() *TrimTest_Test {
	p := new(TrimTest_Test)
	*p = x
	return p
}

func (x TrimTest_Test) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrimTest_Test) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_cloudrun_v2_testdata_test_proto_enumTypes[0].Descriptor()
}

func (TrimTest_Test) Type() protoreflect.EnumType {
	return &file_pkg_cloudrun_v2_testdata_test_proto_enumTypes[0]
}

func (x TrimTest_Test) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrimTest_Test.Descriptor instead.
func (TrimTest_Test) EnumDescriptor() ([]byte, []int) {
	return file_pkg_cloudrun_v2_testdata_test_proto_rawDescGZIP(), []int{0, 0}
}

type TrimTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direct string              `protobuf:"bytes,1,opt,name=direct,proto3" json:"direct,omitempty"`
	Sub    *Message            `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	Map    map[string]string   `protobuf:"bytes,3,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	List   []string            `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	Empty  *Message            `protobuf:"bytes,5,opt,name=empty,proto3" json:"empty,omitempty"`
	Mapsub map[string]*Message `protobuf:"bytes,6,rep,name=mapsub,proto3" json:"mapsub,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Oneof1:
	//	*TrimTest_OneofDirect1
	//	*TrimTest_OneofSub1
	Oneof1 isTrimTest_Oneof1 `protobuf_oneof:"oneof1"`
	// Types that are assignable to Oneof2:
	//	*TrimTest_OneofDirect2
	//	*TrimTest_OneofSub2
	Oneof2          isTrimTest_Oneof2 `protobuf_oneof:"oneof2"`
	RepeatedMessage []*Message        `protobuf:"bytes,11,rep,name=repeated_message,json=repeatedMessage,proto3" json:"repeated_message,omitempty"`
	Enum            TrimTest_Test     `protobuf:"varint,12,opt,name=enum,proto3,enum=pkg.cloudrun.v2.testdata.TrimTest_Test" json:"enum,omitempty"`
}

func (x *TrimTest) Reset() {
	*x = TrimTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cloudrun_v2_testdata_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrimTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimTest) ProtoMessage() {}

func (x *TrimTest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cloudrun_v2_testdata_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimTest.ProtoReflect.Descriptor instead.
func (*TrimTest) Descriptor() ([]byte, []int) {
	return file_pkg_cloudrun_v2_testdata_test_proto_rawDescGZIP(), []int{0}
}

func (x *TrimTest) GetDirect() string {
	if x != nil {
		return x.Direct
	}
	return ""
}

func (x *TrimTest) GetSub() *Message {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *TrimTest) GetMap() map[string]string {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *TrimTest) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TrimTest) GetEmpty() *Message {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *TrimTest) GetMapsub() map[string]*Message {
	if x != nil {
		return x.Mapsub
	}
	return nil
}

func (m *TrimTest) GetOneof1() isTrimTest_Oneof1 {
	if m != nil {
		return m.Oneof1
	}
	return nil
}

func (x *TrimTest) GetOneofDirect1() string {
	if x, ok := x.GetOneof1().(*TrimTest_OneofDirect1); ok {
		return x.OneofDirect1
	}
	return ""
}

func (x *TrimTest) GetOneofSub1() *Message {
	if x, ok := x.GetOneof1().(*TrimTest_OneofSub1); ok {
		return x.OneofSub1
	}
	return nil
}

func (m *TrimTest) GetOneof2() isTrimTest_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}

func (x *TrimTest) GetOneofDirect2() string {
	if x, ok := x.GetOneof2().(*TrimTest_OneofDirect2); ok {
		return x.OneofDirect2
	}
	return ""
}

func (x *TrimTest) GetOneofSub2() *Message {
	if x, ok := x.GetOneof2().(*TrimTest_OneofSub2); ok {
		return x.OneofSub2
	}
	return nil
}

func (x *TrimTest) GetRepeatedMessage() []*Message {
	if x != nil {
		return x.RepeatedMessage
	}
	return nil
}

func (x *TrimTest) GetEnum() TrimTest_Test {
	if x != nil {
		return x.Enum
	}
	return TrimTest_TEST_UNKNOWN
}

type isTrimTest_Oneof1 interface {
	isTrimTest_Oneof1()
}

type TrimTest_OneofDirect1 struct {
	OneofDirect1 string `protobuf:"bytes,7,opt,name=oneof_direct1,json=oneofDirect1,proto3,oneof"`
}

type TrimTest_OneofSub1 struct {
	OneofSub1 *Message `protobuf:"bytes,8,opt,name=oneof_sub1,json=oneofSub1,proto3,oneof"`
}

func (*TrimTest_OneofDirect1) isTrimTest_Oneof1() {}

func (*TrimTest_OneofSub1) isTrimTest_Oneof1() {}

type isTrimTest_Oneof2 interface {
	isTrimTest_Oneof2()
}

type TrimTest_OneofDirect2 struct {
	OneofDirect2 string `protobuf:"bytes,9,opt,name=oneof_direct2,json=oneofDirect2,proto3,oneof"`
}

type TrimTest_OneofSub2 struct {
	OneofSub2 *Message `protobuf:"bytes,10,opt,name=oneof_sub2,json=oneofSub2,proto3,oneof"`
}

func (*TrimTest_OneofDirect2) isTrimTest_Oneof2() {}

func (*TrimTest_OneofSub2) isTrimTest_Oneof2() {}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child         string   `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	RepeatedChild []string `protobuf:"bytes,2,rep,name=repeated_child,json=repeatedChild,proto3" json:"repeated_child,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cloudrun_v2_testdata_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cloudrun_v2_testdata_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_pkg_cloudrun_v2_testdata_test_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetChild() string {
	if x != nil {
		return x.Child
	}
	return ""
}

func (x *Message) GetRepeatedChild() []string {
	if x != nil {
		return x.RepeatedChild
	}
	return nil
}

var File_pkg_cloudrun_v2_testdata_test_proto protoreflect.FileDescriptor

var file_pkg_cloudrun_v2_testdata_test_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x75, 0x6e, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xde, 0x06, 0x0a, 0x08, 0x54, 0x72, 0x69, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x75, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x3d, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x73, 0x75, 0x62, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x72, 0x69, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x75, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x73, 0x75, 0x62, 0x12, 0x25, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x31, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x31, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x75,
	0x62, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x53, 0x75, 0x62, 0x31, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x32, 0x12,
	0x42, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x32, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72,
	0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53,
	0x75, 0x62, 0x32, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x75, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x1a, 0x36,
	0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x73, 0x75, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x22, 0x46, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_cloudrun_v2_testdata_test_proto_rawDescOnce sync.Once
	file_pkg_cloudrun_v2_testdata_test_proto_rawDescData = file_pkg_cloudrun_v2_testdata_test_proto_rawDesc
)

func file_pkg_cloudrun_v2_testdata_test_proto_rawDescGZIP() []byte {
	file_pkg_cloudrun_v2_testdata_test_proto_rawDescOnce.Do(func() {
		file_pkg_cloudrun_v2_testdata_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_cloudrun_v2_testdata_test_proto_rawDescData)
	})
	return file_pkg_cloudrun_v2_testdata_test_proto_rawDescData
}

var file_pkg_cloudrun_v2_testdata_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_cloudrun_v2_testdata_test_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_cloudrun_v2_testdata_test_proto_goTypes = []interface{}{
	(TrimTest_Test)(0), // 0: pkg.cloudrun.v2.testdata.TrimTest.Test
	(*TrimTest)(nil),   // 1: pkg.cloudrun.v2.testdata.TrimTest
	(*Message)(nil),    // 2: pkg.cloudrun.v2.testdata.Message
	nil,                // 3: pkg.cloudrun.v2.testdata.TrimTest.MapEntry
	nil,                // 4: pkg.cloudrun.v2.testdata.TrimTest.MapsubEntry
}
var file_pkg_cloudrun_v2_testdata_test_proto_depIdxs = []int32{
	2, // 0: pkg.cloudrun.v2.testdata.TrimTest.sub:type_name -> pkg.cloudrun.v2.testdata.Message
	3, // 1: pkg.cloudrun.v2.testdata.TrimTest.map:type_name -> pkg.cloudrun.v2.testdata.TrimTest.MapEntry
	2, // 2: pkg.cloudrun.v2.testdata.TrimTest.empty:type_name -> pkg.cloudrun.v2.testdata.Message
	4, // 3: pkg.cloudrun.v2.testdata.TrimTest.mapsub:type_name -> pkg.cloudrun.v2.testdata.TrimTest.MapsubEntry
	2, // 4: pkg.cloudrun.v2.testdata.TrimTest.oneof_sub1:type_name -> pkg.cloudrun.v2.testdata.Message
	2, // 5: pkg.cloudrun.v2.testdata.TrimTest.oneof_sub2:type_name -> pkg.cloudrun.v2.testdata.Message
	2, // 6: pkg.cloudrun.v2.testdata.TrimTest.repeated_message:type_name -> pkg.cloudrun.v2.testdata.Message
	0, // 7: pkg.cloudrun.v2.testdata.TrimTest.enum:type_name -> pkg.cloudrun.v2.testdata.TrimTest.Test
	2, // 8: pkg.cloudrun.v2.testdata.TrimTest.MapsubEntry.value:type_name -> pkg.cloudrun.v2.testdata.Message
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_cloudrun_v2_testdata_test_proto_init() }
func file_pkg_cloudrun_v2_testdata_test_proto_init() {
	if File_pkg_cloudrun_v2_testdata_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_cloudrun_v2_testdata_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrimTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cloudrun_v2_testdata_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_cloudrun_v2_testdata_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TrimTest_OneofDirect1)(nil),
		(*TrimTest_OneofSub1)(nil),
		(*TrimTest_OneofDirect2)(nil),
		(*TrimTest_OneofSub2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_cloudrun_v2_testdata_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_cloudrun_v2_testdata_test_proto_goTypes,
		DependencyIndexes: file_pkg_cloudrun_v2_testdata_test_proto_depIdxs,
		EnumInfos:         file_pkg_cloudrun_v2_testdata_test_proto_enumTypes,
		MessageInfos:      file_pkg_cloudrun_v2_testdata_test_proto_msgTypes,
	}.Build()
	File_pkg_cloudrun_v2_testdata_test_proto = out.File
	file_pkg_cloudrun_v2_testdata_test_proto_rawDesc = nil
	file_pkg_cloudrun_v2_testdata_test_proto_goTypes = nil
	file_pkg_cloudrun_v2_testdata_test_proto_depIdxs = nil
}
