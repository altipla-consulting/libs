// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apps/queues/protos/queues/queues.proto

package queues_queues

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Queue_Unit int32

const (
	Queue_UNIT_UNKNOWN Queue_Unit = 0
	Queue_UNIT_SECONDS Queue_Unit = 1
	Queue_UNIT_MINUTES Queue_Unit = 2
)

var Queue_Unit_name = map[int32]string{
	0: "UNIT_UNKNOWN",
	1: "UNIT_SECONDS",
	2: "UNIT_MINUTES",
}

var Queue_Unit_value = map[string]int32{
	"UNIT_UNKNOWN": 0,
	"UNIT_SECONDS": 1,
	"UNIT_MINUTES": 2,
}

func (x Queue_Unit) String() string {
	return proto.EnumName(Queue_Unit_name, int32(x))
}

func (Queue_Unit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{11, 0}
}

type ListenRequest struct {
	// Types that are valid to be assigned to Request:
	//  *ListenRequest_Initial
	//  *ListenRequest_Ack
	Request              isListenRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListenRequest) Reset()         { *m = ListenRequest{} }
func (m *ListenRequest) String() string { return proto.CompactTextString(m) }
func (*ListenRequest) ProtoMessage()    {}
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{0}
}

func (m *ListenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenRequest.Unmarshal(m, b)
}
func (m *ListenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenRequest.Marshal(b, m, deterministic)
}
func (m *ListenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenRequest.Merge(m, src)
}
func (m *ListenRequest) XXX_Size() int {
	return xxx_messageInfo_ListenRequest.Size(m)
}
func (m *ListenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenRequest proto.InternalMessageInfo

type isListenRequest_Request interface {
	isListenRequest_Request()
}

type ListenRequest_Initial struct {
	Initial *ListenInitial `protobuf:"bytes,1,opt,name=initial,proto3,oneof"`
}

type ListenRequest_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*ListenRequest_Initial) isListenRequest_Request() {}

func (*ListenRequest_Ack) isListenRequest_Request() {}

func (m *ListenRequest) GetRequest() isListenRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListenRequest) GetInitial() *ListenInitial {
	if x, ok := m.GetRequest().(*ListenRequest_Initial); ok {
		return x.Initial
	}
	return nil
}

func (m *ListenRequest) GetAck() *Ack {
	if x, ok := m.GetRequest().(*ListenRequest_Ack); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListenRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListenRequest_OneofMarshaler, _ListenRequest_OneofUnmarshaler, _ListenRequest_OneofSizer, []interface{}{
		(*ListenRequest_Initial)(nil),
		(*ListenRequest_Ack)(nil),
	}
}

func _ListenRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListenRequest)
	// request
	switch x := m.Request.(type) {
	case *ListenRequest_Initial:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Initial); err != nil {
			return err
		}
	case *ListenRequest_Ack:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ListenRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _ListenRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListenRequest)
	switch tag {
	case 1: // request.initial
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListenInitial)
		err := b.DecodeMessage(msg)
		m.Request = &ListenRequest_Initial{msg}
		return true, err
	case 2: // request.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ack)
		err := b.DecodeMessage(msg)
		m.Request = &ListenRequest_Ack{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ListenRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListenRequest)
	// request
	switch x := m.Request.(type) {
	case *ListenRequest_Initial:
		s := proto.Size(x.Initial)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ListenRequest_Ack:
		s := proto.Size(x.Ack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListenInitial struct {
	// Código de proyecto.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Nombre de la cola.
	QueueName            string   `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenInitial) Reset()         { *m = ListenInitial{} }
func (m *ListenInitial) String() string { return proto.CompactTextString(m) }
func (*ListenInitial) ProtoMessage()    {}
func (*ListenInitial) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{1}
}

func (m *ListenInitial) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenInitial.Unmarshal(m, b)
}
func (m *ListenInitial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenInitial.Marshal(b, m, deterministic)
}
func (m *ListenInitial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenInitial.Merge(m, src)
}
func (m *ListenInitial) XXX_Size() int {
	return xxx_messageInfo_ListenInitial.Size(m)
}
func (m *ListenInitial) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenInitial.DiscardUnknown(m)
}

var xxx_messageInfo_ListenInitial proto.InternalMessageInfo

func (m *ListenInitial) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListenInitial) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

type Ack struct {
	// Código de la tarea que confirmamos.
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Tag para indicar si la tarea se ha completado correctamente.
	Success              bool     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{2}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Ack) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ListenReply struct {
	// Tarea que debe ejecutar el worker.
	Task                 *Task    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenReply) Reset()         { *m = ListenReply{} }
func (m *ListenReply) String() string { return proto.CompactTextString(m) }
func (*ListenReply) ProtoMessage()    {}
func (*ListenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{3}
}

func (m *ListenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenReply.Unmarshal(m, b)
}
func (m *ListenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenReply.Marshal(b, m, deterministic)
}
func (m *ListenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenReply.Merge(m, src)
}
func (m *ListenReply) XXX_Size() int {
	return xxx_messageInfo_ListenReply.Size(m)
}
func (m *ListenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListenReply proto.InternalMessageInfo

func (m *ListenReply) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type Task struct {
	// Código único que identifica la tarea.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Contenido de la tarea.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Momento en el que se mandó a la cola la tarea.
	Created *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Número de reintento de la ejecución.
	Retry int32 `protobuf:"varint,4,opt,name=retry,proto3" json:"retry,omitempty"`
	// ETA (Estimated Time of Arrival) mínimo que debe tener la tarea. Nos permite
	// retrasar una tarea si le pasamos una fecha futura. Si no está especificada
	// o es una fecha pasada la tarea se ejecutará lo antes posible.
	MinEta *timestamp.Timestamp `protobuf:"bytes,5,opt,name=min_eta,json=minEta,proto3" json:"min_eta,omitempty"`
	// Proyecto que ejecuta esta tarea.
	Project string `protobuf:"bytes,6,opt,name=project,proto3" json:"project,omitempty"`
	// Nombre de la cola que ejecuta esta tarea.
	QueueName            string   `protobuf:"bytes,7,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{4}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Task) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Task) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Task) GetRetry() int32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *Task) GetMinEta() *timestamp.Timestamp {
	if m != nil {
		return m.MinEta
	}
	return nil
}

func (m *Task) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Task) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

type SendTasksRequest struct {
	// Código de proyecto.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Nombre de la cola.
	QueueName string `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	// Listado de tareas que queremos enviar a la cola.
	Tasks                []*SendTask `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SendTasksRequest) Reset()         { *m = SendTasksRequest{} }
func (m *SendTasksRequest) String() string { return proto.CompactTextString(m) }
func (*SendTasksRequest) ProtoMessage()    {}
func (*SendTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{5}
}

func (m *SendTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTasksRequest.Unmarshal(m, b)
}
func (m *SendTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTasksRequest.Marshal(b, m, deterministic)
}
func (m *SendTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTasksRequest.Merge(m, src)
}
func (m *SendTasksRequest) XXX_Size() int {
	return xxx_messageInfo_SendTasksRequest.Size(m)
}
func (m *SendTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendTasksRequest proto.InternalMessageInfo

func (m *SendTasksRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *SendTasksRequest) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *SendTasksRequest) GetTasks() []*SendTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type SendTask struct {
	// Contenido JSON de la tarea.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// ETA (Estimated Time of Arrival) mínimo que debe tener la tarea. Nos permite
	// retrasar una tarea si le pasamos una fecha futura. Si no está especificada
	// o es una fecha pasada la tarea se ejecutará lo antes posible.
	MinEta               *timestamp.Timestamp `protobuf:"bytes,2,opt,name=min_eta,json=minEta,proto3" json:"min_eta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SendTask) Reset()         { *m = SendTask{} }
func (m *SendTask) String() string { return proto.CompactTextString(m) }
func (*SendTask) ProtoMessage()    {}
func (*SendTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{6}
}

func (m *SendTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTask.Unmarshal(m, b)
}
func (m *SendTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTask.Marshal(b, m, deterministic)
}
func (m *SendTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTask.Merge(m, src)
}
func (m *SendTask) XXX_Size() int {
	return xxx_messageInfo_SendTask.Size(m)
}
func (m *SendTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTask.DiscardUnknown(m)
}

var xxx_messageInfo_SendTask proto.InternalMessageInfo

func (m *SendTask) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SendTask) GetMinEta() *timestamp.Timestamp {
	if m != nil {
		return m.MinEta
	}
	return nil
}

type SendTasksReply struct {
	// Listado de códigos de tareas que se han creado en el servidor.
	Codes                []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendTasksReply) Reset()         { *m = SendTasksReply{} }
func (m *SendTasksReply) String() string { return proto.CompactTextString(m) }
func (*SendTasksReply) ProtoMessage()    {}
func (*SendTasksReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{7}
}

func (m *SendTasksReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTasksReply.Unmarshal(m, b)
}
func (m *SendTasksReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTasksReply.Marshal(b, m, deterministic)
}
func (m *SendTasksReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTasksReply.Merge(m, src)
}
func (m *SendTasksReply) XXX_Size() int {
	return xxx_messageInfo_SendTasksReply.Size(m)
}
func (m *SendTasksReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTasksReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendTasksReply proto.InternalMessageInfo

func (m *SendTasksReply) GetCodes() []string {
	if m != nil {
		return m.Codes
	}
	return nil
}

type ListTasksRequest struct {
	// Código de proyecto.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Nombre de la cola.
	QueueName            string   `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTasksRequest) Reset()         { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()    {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{8}
}

func (m *ListTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTasksRequest.Unmarshal(m, b)
}
func (m *ListTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTasksRequest.Marshal(b, m, deterministic)
}
func (m *ListTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTasksRequest.Merge(m, src)
}
func (m *ListTasksRequest) XXX_Size() int {
	return xxx_messageInfo_ListTasksRequest.Size(m)
}
func (m *ListTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTasksRequest proto.InternalMessageInfo

func (m *ListTasksRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListTasksRequest) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

type ListTasksReply struct {
	// Listado de máximo 30 elementos de las próximas tareas que se van a ejecutar
	// en la cola que hemos pedido.
	Tasks                []*Task  `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTasksReply) Reset()         { *m = ListTasksReply{} }
func (m *ListTasksReply) String() string { return proto.CompactTextString(m) }
func (*ListTasksReply) ProtoMessage()    {}
func (*ListTasksReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{9}
}

func (m *ListTasksReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTasksReply.Unmarshal(m, b)
}
func (m *ListTasksReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTasksReply.Marshal(b, m, deterministic)
}
func (m *ListTasksReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTasksReply.Merge(m, src)
}
func (m *ListTasksReply) XXX_Size() int {
	return xxx_messageInfo_ListTasksReply.Size(m)
}
func (m *ListTasksReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTasksReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListTasksReply proto.InternalMessageInfo

func (m *ListTasksReply) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ListRequest struct {
	// Código de proyecto.
	Project              string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{10}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type Queue struct {
	// Código de proyecto.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Nombre de la cola.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Número de tareas que se ejecutarán por unidad de tiempo en esta cola.
	TasksPerUnit int64 `protobuf:"varint,3,opt,name=tasks_per_unit,json=tasksPerUnit,proto3" json:"tasks_per_unit,omitempty"`
	// Unidad de tiempos que determina el ritmo de ejecución.
	Unit Queue_Unit `protobuf:"varint,4,opt,name=unit,proto3,enum=queues.queues.Queue_Unit" json:"unit,omitempty"`
	// Estado de runtime de la cola si está ejecutando tareas activamente o no.
	Paused bool `protobuf:"varint,5,opt,name=paused,proto3" json:"paused,omitempty"`
	// Número de reintentos que tiene cada tarea en la cola. Los reintentos se harán
	// con un backoff doblando el tiempo de espera cada vez. Los 10 primeros tiempos son:
	//   1m, 2m, 4m, 8m, 16m, 32m, 1h4m, 2h8m, 4h16m, 8h32m.
	MaxRetries int32 `protobuf:"varint,6,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Tareas máximas que se estarán ejecutando al mismo tiempo.
	MaxConcurrent        int32    `protobuf:"varint,7,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Queue) Reset()         { *m = Queue{} }
func (m *Queue) String() string { return proto.CompactTextString(m) }
func (*Queue) ProtoMessage()    {}
func (*Queue) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{11}
}

func (m *Queue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Queue.Unmarshal(m, b)
}
func (m *Queue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Queue.Marshal(b, m, deterministic)
}
func (m *Queue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Queue.Merge(m, src)
}
func (m *Queue) XXX_Size() int {
	return xxx_messageInfo_Queue.Size(m)
}
func (m *Queue) XXX_DiscardUnknown() {
	xxx_messageInfo_Queue.DiscardUnknown(m)
}

var xxx_messageInfo_Queue proto.InternalMessageInfo

func (m *Queue) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Queue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Queue) GetTasksPerUnit() int64 {
	if m != nil {
		return m.TasksPerUnit
	}
	return 0
}

func (m *Queue) GetUnit() Queue_Unit {
	if m != nil {
		return m.Unit
	}
	return Queue_UNIT_UNKNOWN
}

func (m *Queue) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *Queue) GetMaxRetries() int32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *Queue) GetMaxConcurrent() int32 {
	if m != nil {
		return m.MaxConcurrent
	}
	return 0
}

type ListReply struct {
	Queues               []*Queue `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReply) Reset()         { *m = ListReply{} }
func (m *ListReply) String() string { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()    {}
func (*ListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{12}
}

func (m *ListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReply.Unmarshal(m, b)
}
func (m *ListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReply.Marshal(b, m, deterministic)
}
func (m *ListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReply.Merge(m, src)
}
func (m *ListReply) XXX_Size() int {
	return xxx_messageInfo_ListReply.Size(m)
}
func (m *ListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListReply proto.InternalMessageInfo

func (m *ListReply) GetQueues() []*Queue {
	if m != nil {
		return m.Queues
	}
	return nil
}

type PauseRequest struct {
	// Código de proyecto.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Nombre de la cola.
	QueueName            string   `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PauseRequest) Reset()         { *m = PauseRequest{} }
func (m *PauseRequest) String() string { return proto.CompactTextString(m) }
func (*PauseRequest) ProtoMessage()    {}
func (*PauseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{13}
}

func (m *PauseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PauseRequest.Unmarshal(m, b)
}
func (m *PauseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PauseRequest.Marshal(b, m, deterministic)
}
func (m *PauseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseRequest.Merge(m, src)
}
func (m *PauseRequest) XXX_Size() int {
	return xxx_messageInfo_PauseRequest.Size(m)
}
func (m *PauseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PauseRequest proto.InternalMessageInfo

func (m *PauseRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *PauseRequest) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

type ResumeRequest struct {
	// Código de proyecto.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Nombre de la cola.
	QueueName            string   `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResumeRequest) Reset()         { *m = ResumeRequest{} }
func (m *ResumeRequest) String() string { return proto.CompactTextString(m) }
func (*ResumeRequest) ProtoMessage()    {}
func (*ResumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05add8dac95ef17c, []int{14}
}

func (m *ResumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeRequest.Unmarshal(m, b)
}
func (m *ResumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeRequest.Marshal(b, m, deterministic)
}
func (m *ResumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeRequest.Merge(m, src)
}
func (m *ResumeRequest) XXX_Size() int {
	return xxx_messageInfo_ResumeRequest.Size(m)
}
func (m *ResumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeRequest proto.InternalMessageInfo

func (m *ResumeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ResumeRequest) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func init() {
	proto.RegisterEnum("queues.queues.Queue_Unit", Queue_Unit_name, Queue_Unit_value)
	proto.RegisterType((*ListenRequest)(nil), "queues.queues.ListenRequest")
	proto.RegisterType((*ListenInitial)(nil), "queues.queues.ListenInitial")
	proto.RegisterType((*Ack)(nil), "queues.queues.Ack")
	proto.RegisterType((*ListenReply)(nil), "queues.queues.ListenReply")
	proto.RegisterType((*Task)(nil), "queues.queues.Task")
	proto.RegisterType((*SendTasksRequest)(nil), "queues.queues.SendTasksRequest")
	proto.RegisterType((*SendTask)(nil), "queues.queues.SendTask")
	proto.RegisterType((*SendTasksReply)(nil), "queues.queues.SendTasksReply")
	proto.RegisterType((*ListTasksRequest)(nil), "queues.queues.ListTasksRequest")
	proto.RegisterType((*ListTasksReply)(nil), "queues.queues.ListTasksReply")
	proto.RegisterType((*ListRequest)(nil), "queues.queues.ListRequest")
	proto.RegisterType((*Queue)(nil), "queues.queues.Queue")
	proto.RegisterType((*ListReply)(nil), "queues.queues.ListReply")
	proto.RegisterType((*PauseRequest)(nil), "queues.queues.PauseRequest")
	proto.RegisterType((*ResumeRequest)(nil), "queues.queues.ResumeRequest")
}

func init() {
	proto.RegisterFile("apps/queues/protos/queues/queues.proto", fileDescriptor_05add8dac95ef17c)
}

var fileDescriptor_05add8dac95ef17c = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x5e, 0x3b, 0x3e, 0x8e, 0x2d, 0x6b, 0x88, 0x60, 0x31, 0xa9, 0x12, 0x8d, 0x20,
	0x71, 0x2b, 0x62, 0x23, 0x07, 0xa1, 0xb6, 0x70, 0x53, 0x4a, 0x84, 0xa3, 0x82, 0x5b, 0xc6, 0x89,
	0x10, 0x57, 0x66, 0xba, 0x1e, 0xaa, 0xc5, 0xde, 0x9f, 0xee, 0xcc, 0x42, 0x4c, 0xdb, 0x1b, 0x24,
	0x9e, 0x80, 0x97, 0xe0, 0x92, 0x77, 0xe1, 0x15, 0xb8, 0xe6, 0x19, 0xd0, 0x9c, 0xd9, 0x31, 0xb6,
	0x6b, 0xb7, 0x81, 0x70, 0xe5, 0x3d, 0x67, 0xbf, 0x39, 0xdf, 0x39, 0xdf, 0xf9, 0x66, 0x0d, 0x87,
	0x3c, 0x49, 0x64, 0xf7, 0x69, 0x26, 0x32, 0x21, 0xbb, 0x49, 0x1a, 0xab, 0x78, 0x1e, 0x99, 0x9f,
	0x0e, 0x26, 0x49, 0x3d, 0x8f, 0xcc, 0x4f, 0x6b, 0xff, 0x49, 0x1c, 0x3f, 0x99, 0x0a, 0x73, 0xe2,
	0x71, 0xf6, 0x5d, 0x57, 0x05, 0xa1, 0x90, 0x8a, 0x87, 0x89, 0xc1, 0xb7, 0xf6, 0x72, 0x00, 0x4f,
	0x82, 0x2e, 0x8f, 0xa2, 0x58, 0x71, 0x15, 0xc4, 0x51, 0x5e, 0x8d, 0x3e, 0x87, 0xfa, 0x17, 0x81,
	0x54, 0x22, 0x62, 0xe2, 0x69, 0x26, 0xa4, 0x22, 0xb7, 0xa1, 0x12, 0x44, 0x81, 0x0a, 0xf8, 0xd4,
	0x73, 0x0e, 0x9c, 0x76, 0xad, 0xb7, 0xd7, 0x59, 0x22, 0xec, 0x18, 0xf8, 0x99, 0xc1, 0xf4, 0xb7,
	0x98, 0x85, 0x93, 0x43, 0x28, 0x72, 0x7f, 0xe2, 0x15, 0xf0, 0x14, 0x59, 0x39, 0x75, 0xcf, 0x9f,
	0xf4, 0xb7, 0x98, 0x06, 0x7c, 0x5a, 0x85, 0x4a, 0x6a, 0xc8, 0x68, 0xdf, 0xb2, 0xe7, 0xe5, 0x88,
	0x07, 0x95, 0x24, 0x8d, 0xbf, 0x17, 0xbe, 0x42, 0xf6, 0x2a, 0xb3, 0x21, 0xb9, 0x01, 0x80, 0xa5,
	0x46, 0x11, 0x0f, 0x05, 0x92, 0x54, 0x59, 0x15, 0x33, 0x03, 0x1e, 0x0a, 0x7a, 0x02, 0xc5, 0x7b,
	0xfe, 0x84, 0x10, 0x28, 0xf9, 0xf1, 0x58, 0x78, 0x45, 0x7c, 0x8f, 0xcf, 0xba, 0xa6, 0xcc, 0x7c,
	0x5f, 0x48, 0xe9, 0x95, 0x0e, 0x9c, 0xf6, 0x36, 0xb3, 0x21, 0xfd, 0x08, 0x6a, 0x76, 0xf8, 0x64,
	0x3a, 0x23, 0x47, 0x50, 0x52, 0x5c, 0x4e, 0xf2, 0xb9, 0xdf, 0x58, 0x99, 0xe0, 0x9c, 0xcb, 0x09,
	0x43, 0x00, 0xfd, 0xcb, 0x81, 0x92, 0x0e, 0xe7, 0x74, 0xce, 0x32, 0x5d, 0xc2, 0x67, 0xd3, 0x98,
	0x8f, 0xb1, 0xcb, 0x1d, 0x66, 0x43, 0xf2, 0x21, 0x54, 0xfc, 0x54, 0x70, 0x25, 0xc6, 0xd8, 0x5f,
	0xad, 0xd7, 0xea, 0x98, 0xdd, 0x74, 0xec, 0xf2, 0x3a, 0xe7, 0x76, 0x79, 0xcc, 0x42, 0xc9, 0x2e,
	0xb8, 0xa9, 0x50, 0xe9, 0x0c, 0x9b, 0x77, 0x99, 0x09, 0xc8, 0x09, 0x54, 0xc2, 0x20, 0x1a, 0x09,
	0xc5, 0x3d, 0xf7, 0xb5, 0xb5, 0xca, 0x61, 0x10, 0x9d, 0x2a, 0xbe, 0xa8, 0x6e, 0xf9, 0x55, 0xea,
	0x56, 0x56, 0xd5, 0xfd, 0x09, 0x9a, 0x43, 0x11, 0x8d, 0xf5, 0xcc, 0xd2, 0x1a, 0xe5, 0xbf, 0xae,
	0x8a, 0x1c, 0x83, 0xab, 0x55, 0x94, 0x5e, 0xf1, 0xa0, 0xd8, 0xae, 0xf5, 0xde, 0x5a, 0xd1, 0xd9,
	0x12, 0x31, 0x83, 0xa2, 0xdf, 0xc0, 0xb6, 0x4d, 0x2d, 0x6a, 0xeb, 0x2c, 0x6b, 0xbb, 0xa0, 0x47,
	0xe1, 0xaa, 0x7a, 0xd0, 0x43, 0x68, 0x2c, 0x8c, 0xa5, 0x2d, 0xb0, 0x0b, 0xae, 0x5e, 0xa2, 0xf4,
	0x9c, 0x83, 0x62, 0xbb, 0xca, 0x4c, 0x40, 0x1f, 0x40, 0x53, 0xfb, 0xe4, 0x7f, 0x19, 0x9f, 0x7e,
	0x0c, 0x8d, 0x85, 0x62, 0x9a, 0xf4, 0xa6, 0x15, 0xc4, 0x41, 0x41, 0xd6, 0x1a, 0x2f, 0x17, 0xe3,
	0xc8, 0x38, 0xf6, 0xb5, 0x4d, 0xd0, 0xdf, 0x0a, 0xe0, 0x7e, 0xa5, 0xcf, 0xbf, 0xa2, 0x51, 0x02,
	0xa5, 0x85, 0x16, 0xf1, 0x99, 0xbc, 0x0b, 0x0d, 0x64, 0x1a, 0x25, 0x22, 0x1d, 0x65, 0x51, 0xa0,
	0xd0, 0xaa, 0x45, 0xb6, 0x83, 0xd9, 0x47, 0x22, 0xbd, 0x88, 0x02, 0x45, 0x8e, 0xa1, 0x84, 0xef,
	0xb4, 0x25, 0x1b, 0xbd, 0xb7, 0x57, 0x1a, 0x46, 0xde, 0x8e, 0x06, 0x32, 0x84, 0x91, 0x37, 0xa1,
	0x9c, 0xf0, 0x4c, 0x8a, 0x31, 0x7a, 0x75, 0x9b, 0xe5, 0x11, 0xd9, 0x87, 0x5a, 0xc8, 0x2f, 0x47,
	0xda, 0xd1, 0x81, 0x90, 0xe8, 0x49, 0x97, 0x41, 0xc8, 0x2f, 0x99, 0xc9, 0x90, 0xf7, 0xa0, 0xa1,
	0x01, 0x7e, 0x1c, 0xf9, 0x59, 0x9a, 0x8a, 0x48, 0xa1, 0x35, 0x5d, 0x56, 0x0f, 0xf9, 0xe5, 0xfd,
	0x79, 0x92, 0x7e, 0x02, 0x25, 0x6c, 0xab, 0x09, 0x3b, 0x17, 0x83, 0xb3, 0xf3, 0xd1, 0xc5, 0xe0,
	0xc1, 0xe0, 0xe1, 0xd7, 0x83, 0xe6, 0xd6, 0x3c, 0x33, 0x3c, 0xbd, 0xff, 0x70, 0xf0, 0xd9, 0xb0,
	0xe9, 0xcc, 0x33, 0x5f, 0x9e, 0x0d, 0x2e, 0xce, 0x4f, 0x87, 0xcd, 0x02, 0xbd, 0x03, 0x55, 0xa3,
	0xa9, 0xde, 0xc5, 0xfb, 0x50, 0x36, 0x53, 0x78, 0x05, 0x5c, 0xc6, 0xee, 0xba, 0xd9, 0x58, 0x8e,
	0xa1, 0x9f, 0xc3, 0xce, 0x23, 0x3d, 0xca, 0xb5, 0x4d, 0xd1, 0x87, 0x3a, 0x13, 0x32, 0x0b, 0xaf,
	0x5d, 0xa9, 0xf7, 0xbb, 0x0b, 0x75, 0x6c, 0x52, 0x0e, 0x45, 0xfa, 0x43, 0xe0, 0x0b, 0xd2, 0x87,
	0xb2, 0xf9, 0xca, 0x91, 0xf5, 0x9f, 0xf2, 0x9c, 0xb2, 0xd5, 0xda, 0xf0, 0x36, 0x99, 0xce, 0xe8,
	0x56, 0xdb, 0xf9, 0xc0, 0x21, 0xbf, 0x38, 0x50, 0x9d, 0x5f, 0x18, 0xb2, 0xbf, 0xe1, 0xe2, 0xda,
	0x2b, 0xd2, 0xba, 0xb1, 0x19, 0xa0, 0x6b, 0xde, 0xfe, 0xf9, 0x8f, 0x3f, 0x7f, 0x2d, 0xf4, 0xe8,
	0x71, 0x37, 0x1f, 0x4d, 0x76, 0x9f, 0xe5, 0x4f, 0x2f, 0xec, 0x3f, 0xdf, 0xb3, 0x7f, 0x46, 0x7d,
	0xd1, 0x45, 0x0b, 0xde, 0x75, 0x6e, 0x91, 0xe7, 0x66, 0x63, 0xeb, 0xdb, 0x58, 0xbd, 0xa9, 0x2f,
	0xb5, 0xb1, 0x7c, 0xfb, 0x68, 0x17, 0xdb, 0xb8, 0x49, 0x8e, 0xae, 0xd8, 0x06, 0xf9, 0x16, 0x4a,
	0xba, 0x04, 0x59, 0xa7, 0x97, 0xe5, 0xf4, 0xd6, 0xbe, 0xd3, 0x74, 0x14, 0xe9, 0xf6, 0x48, 0x6b,
	0x33, 0x1d, 0x51, 0xe0, 0xa2, 0xad, 0xc8, 0x3b, 0x2b, 0x65, 0x16, 0xcd, 0xd6, 0x5a, 0x6b, 0xcd,
	0x7f, 0xaf, 0x2a, 0xde, 0x45, 0xad, 0xea, 0x8f, 0x50, 0x36, 0x1e, 0x7c, 0xc9, 0x27, 0x4b, 0xd6,
	0xdc, 0xc0, 0x7b, 0x07, 0x79, 0x4f, 0x68, 0xe7, 0xaa, 0xbc, 0x29, 0x16, 0xbd, 0xeb, 0xdc, 0x7a,
	0x5c, 0xc6, 0x4f, 0xf4, 0xc9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xea, 0x1b, 0x96, 0x67, 0x02,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueuesServiceClient is the client API for QueuesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueuesServiceClient interface {
	// Abre una conexión permanente para recibir tareas.
	Listen(ctx context.Context, opts ...grpc.CallOption) (QueuesService_ListenClient, error)
	// Manda una o varias tareas a una cola.
	SendTasks(ctx context.Context, in *SendTasksRequest, opts ...grpc.CallOption) (*SendTasksReply, error)
	// Lista las 30 próximas tareas de la cola.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksReply, error)
	// Lista las colas disponibles en el sistema.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	// Pausa la ejecución de tareas en una cola.
	//
	// TODO(ernesto): Cambiar la ruta a {queue_name}:pause cuando esté soportada.
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*Queue, error)
	// Continua con la ejecución de tareas en una cola.
	//
	// TODO(ernesto): Cambiar la ruta a {queue_name}:resume cuando esté soportada.
	Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*Queue, error)
}

type queuesServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueuesServiceClient(cc *grpc.ClientConn) QueuesServiceClient {
	return &queuesServiceClient{cc}
}

func (c *queuesServiceClient) Listen(ctx context.Context, opts ...grpc.CallOption) (QueuesService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueuesService_serviceDesc.Streams[0], "/queues.queues.QueuesService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &queuesServiceListenClient{stream}
	return x, nil
}

type QueuesService_ListenClient interface {
	Send(*ListenRequest) error
	Recv() (*ListenReply, error)
	grpc.ClientStream
}

type queuesServiceListenClient struct {
	grpc.ClientStream
}

func (x *queuesServiceListenClient) Send(m *ListenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queuesServiceListenClient) Recv() (*ListenReply, error) {
	m := new(ListenReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queuesServiceClient) SendTasks(ctx context.Context, in *SendTasksRequest, opts ...grpc.CallOption) (*SendTasksReply, error) {
	out := new(SendTasksReply)
	err := c.cc.Invoke(ctx, "/queues.queues.QueuesService/SendTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksReply, error) {
	out := new(ListTasksReply)
	err := c.cc.Invoke(ctx, "/queues.queues.QueuesService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/queues.queues.QueuesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesServiceClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/queues.queues.QueuesService/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesServiceClient) Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/queues.queues.QueuesService/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueuesServiceServer is the server API for QueuesService service.
type QueuesServiceServer interface {
	// Abre una conexión permanente para recibir tareas.
	Listen(QueuesService_ListenServer) error
	// Manda una o varias tareas a una cola.
	SendTasks(context.Context, *SendTasksRequest) (*SendTasksReply, error)
	// Lista las 30 próximas tareas de la cola.
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksReply, error)
	// Lista las colas disponibles en el sistema.
	List(context.Context, *ListRequest) (*ListReply, error)
	// Pausa la ejecución de tareas en una cola.
	//
	// TODO(ernesto): Cambiar la ruta a {queue_name}:pause cuando esté soportada.
	Pause(context.Context, *PauseRequest) (*Queue, error)
	// Continua con la ejecución de tareas en una cola.
	//
	// TODO(ernesto): Cambiar la ruta a {queue_name}:resume cuando esté soportada.
	Resume(context.Context, *ResumeRequest) (*Queue, error)
}

func RegisterQueuesServiceServer(s *grpc.Server, srv QueuesServiceServer) {
	s.RegisterService(&_QueuesService_serviceDesc, srv)
}

func _QueuesService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueuesServiceServer).Listen(&queuesServiceListenServer{stream})
}

type QueuesService_ListenServer interface {
	Send(*ListenReply) error
	Recv() (*ListenRequest, error)
	grpc.ServerStream
}

type queuesServiceListenServer struct {
	grpc.ServerStream
}

func (x *queuesServiceListenServer) Send(m *ListenReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queuesServiceListenServer) Recv() (*ListenRequest, error) {
	m := new(ListenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QueuesService_SendTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServiceServer).SendTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queues.queues.QueuesService/SendTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServiceServer).SendTasks(ctx, req.(*SendTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queues.queues.QueuesService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queues.queues.QueuesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queues.queues.QueuesService/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServiceServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesService_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServiceServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queues.queues.QueuesService/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServiceServer).Resume(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueuesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "queues.queues.QueuesService",
	HandlerType: (*QueuesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTasks",
			Handler:    _QueuesService_SendTasks_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _QueuesService_ListTasks_Handler,
		},
		{
			MethodName: "List",
			Handler:    _QueuesService_List_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _QueuesService_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _QueuesService_Resume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _QueuesService_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "apps/queues/protos/queues/queues.proto",
}
